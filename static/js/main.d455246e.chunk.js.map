{"version":3,"sources":["PopularLanguages.js","App.js","serviceWorker.js","index.js"],"names":["PopularLanguages","state","github","popular_languages","name","projects","_this2","this","elements","map","language","index","react_default","a","createElement","key","className","index_es","icon","onClick","tmpLanguages","Object","objectSpread","console","log","splice","setState","Component","library","add","fab","faCheckSquare","faCoffee","faTrashAlt","App","src_PopularLanguages_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTA2EeA,6MAjEdC,MAAQ,CACPC,OAAQ,CACNC,kBAAmB,CAChB,CAACC,KAAM,aAAcC,SAAU,MAC/B,CAACD,KAAM,SAAUC,SAAU,KAC3B,CAACD,KAAM,OAAQC,SAAU,KACzB,CAACD,KAAM,OAAQC,SAAU,KACzB,CAACD,KAAM,MAAOC,SAAU,KACxB,CAACD,KAAM,MAAOC,SAAU,KACxB,CAACD,KAAM,MAAOC,SAAU,KACxB,CAACD,KAAM,KAAMC,SAAU,KACvB,CAACD,KAAM,KAAMC,SAAU,KACzB,CAACD,KAAM,IAAKC,SAAU,KACtB,CAACD,KAAM,aAAcC,SAAU,KAC7B,CAACD,KAAM,QAASC,SAAU,KAC1B,CAACD,KAAM,QAASC,SAAU,KAC1B,CAACD,KAAM,QAASC,SAAU,IAC1B,CAACD,KAAM,cAAeC,SAAU,+EAI7B,IAAAC,EAAAC,KACFC,EAAWD,KAAKN,MAAMC,OAAOC,kBAAkBM,IAAI,SAACC,EAASC,GAAV,OACxDC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GACRC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAQL,EAAM,GAC5BC,EAAAC,EAAAC,cAAA,UAAKJ,EAASN,MACdQ,EAAAC,EAAAC,cAAA,UAAKJ,EAASL,SAAd,KACCO,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACCD,UAAU,cACVE,KAAK,YACLC,QAAS,WACP,IAAIC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAOf,EAAKL,MAAMC,QAClCqB,QAAQC,IAAIJ,GACZA,EAAajB,kBAAkBsB,OAAOd,EAAO,GAC7CL,EAAKoB,SAAS,CAAExB,OAAQkB,WAO9B,OACCR,EAAAC,EAAAC,cAAA,WAECF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,aACCF,EAAAC,EAAAC,cAAA,aACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAiBC,KAAK,YAClCN,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,4BACCF,EAAAC,EAAAC,cAAA,uBAGHF,EAAAC,EAAAC,cAAA,aACEN,aA7DuBmB,mCCG/BC,IAAQC,IAAIC,IAAKC,IAAeC,IAAUC,KAU3BC,MARf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACqB,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d455246e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './PopularLanguages.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nclass PopularLanguages extends Component {\r\n\t// Nesting objects in each other in the state is a bad bad thing! Don't do it.\r\n\t// setState() will not work if we do something like this.setState({github.popular: something})\r\n\t// setState() cannot change nested objects :)\r\n\t// This example is better off without the \"github:{}\" thing :)\r\n\tstate = {\r\n\t\tgithub: {\r\n\t\t\t\tpopular_languages: [\r\n\t\t\t  \t\t{name: 'JavaScript', projects: 2300},\r\n\t\t\t  \t\t{name: 'Python', projects: 1000},\r\n\t\t\t  \t\t{name: 'Java', projects: 986},\r\n\t\t\t  \t\t{name: 'Ruby', projects: 870} ,\r\n\t\t\t  \t\t{name: 'PHP', projects: 559},\r\n\t\t\t  \t\t{name: 'C++', projects: 413} ,\r\n\t\t\t  \t\t{name: 'CSS', projects: 335},\r\n\t\t\t  \t\t{name: 'C#', projects: 326} ,\r\n\t\t\t  \t\t{name: 'Go', projects: 285},\r\n\t\t\t\t\t{name: 'C', projects: 239},\r\n\t\t\t\t\t{name: 'TypeScript', projects: 207},\r\n\t\t\t  \t\t{name: 'Shell', projects: 206},\r\n\t\t\t  \t\t{name: 'Swift', projects: 107},\r\n\t\t\t  \t\t{name: 'Scala', projects: 99},\r\n\t\t\t  \t\t{name: 'Objective-C', projects: 66}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tconst elements = this.state.github.popular_languages.map((language,index) => \r\n\t\t\t<tr key={index}>\r\n\t\t\t\t<td className=\"rank\">{index+1}</td>\r\n\t\t\t\t<td>{language.name}</td>\r\n\t\t\t\t<td>{language.projects}k</td>\r\n\t \t\t\t<td>Remove me:  \r\n\t\t\t\t\t<FontAwesomeIcon \r\n\t\t\t\t\t\tclassName=\"delete_icon\" \r\n\t\t\t\t\t\ticon=\"trash-alt\" \r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tlet tmpLanguages = {...this.state.github};\r\n\t\t\t\t\t\t\t\tconsole.log(tmpLanguages)\r\n\t\t\t\t\t\t\t\ttmpLanguages.popular_languages.splice(index, 1);\r\n\t\t\t\t\t\t\t\tthis.setState({ github: tmpLanguages })\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t)\r\n\t\treturn (\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Ranking <FontAwesomeIcon icon=\"coffee\" /></th>\r\n\t\t\t\t\t\t\t\t<th>Name</th>\r\n\t\t\t\t\t\t\t\t<th>Projects/Repos</th>\r\n\t \t\t\t\t\t\t\t<th>Actions</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{elements}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default PopularLanguages;\r\n\r\n// for a more beautiful answer paste this and uncomment the css - this is based on this guy's work:\r\n// link: https://codepen.io/nikhil8krishnan/pen/WvYPvv\r\n// \t\t\t<section>\r\n// \t\t\t  <h1>Fixed Table header</h1>\r\n// \t\t\t  <div className=\"tbl-header\">\r\n// \t\t\t    <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\r\n// \t\t\t      <thead>\r\n// \t\t\t        <tr>\r\n// \t\t\t\t\t\t<th>Ranking</th>\r\n// \t\t\t\t\t\t<th>Name</th>\r\n// \t\t\t\t\t\t<th>Projects/Repos</th>\r\n// \t\t\t        </tr>\r\n// \t\t\t      </thead>\r\n// \t\t\t    </table>\r\n// \t\t\t  </div>\r\n// \t\t\t  <div className=\"tbl-content\">\r\n// \t\t\t    <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\">\r\n// \t\t\t      <tbody>\r\n// \t\t\t      \t{elements}\r\n// \t\t\t      </tbody>\r\n// \t\t\t    </table>\r\n// \t\t\t  </div>\r\n// \t\t\t</section>\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport PopularLanguages from './PopularLanguages';\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, faCheckSquare, faCoffee, faTrashAlt)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PopularLanguages/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}